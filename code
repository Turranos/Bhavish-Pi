#Bhavish Ver.III
#Improv Prompt Generator
#Created by Michael Moore and Saverio Turrano
#Most recent edit: 11/2/14

import random
import time
from time import sleep
import sys

def print_typer(text): 
    for c in text:
        print(c, end='')
        sys.stdout.flush()
        sleep(.03)

def print_slowly(text): 
    for c in text:
        print(c, end='')
        sys.stdout.flush()
        sleep(.5)

def mode_select(): 
    print("Please select a mode by entering a number.")
    print("1.) Practice Mode")
    print("2.) Performance Mode")
    print("3.) About Bhavish")
    print("4.) Quit")
    mode = ' '
    while mode not in '1 2 3 4'.split():
        mode = input()
        if mode.lower() == 'identify':
            print()
            print_typer("I AM REESE'S CORPORATE!")
            time.sleep(1)
            print()
            print()
            print("Please select a mode.")
        elif mode not in '1 2 3 4'.split():
            print()
            print("Your options are 1, 2, 3 and 4.")
    return mode

def practice_mode_intro():
    print()
    print_typer("Here is your first prompt!")
    time.sleep(.5)
    print()
    print_typer('When you want a new prompt, type "yes" or "y" and press enter!')
    print()
    time.sleep(.5)
    print_slowly("...")
    print()

def get_prompt(mode):  #NEW EASTER EGG
    again = True
    count1 = 0
    count2 = 0
    count3 = 0
    while again != False:
        print()
        number = random.randint(1, 5)
        if again == 'special':
            print('Miley Cyrus at a job interview.')
        elif number >= 1 and number < 3:
            if count1 == 0:
                last_a1, last_c1 = '',''
            new_c1, new_a1 = one_character(last_c1, last_a1)
            last_c1, last_a1 = new_c1, new_a1
            count1 += 1   
        elif number >= 3 and number < 5:
            if count2 == 0:
                last_c2, last_a2 = '',''
            new_c2, new_a2 = two_characters(last_c2, last_a2)
            last_c2, last_a2 = new_c2, new_c2
            count2 += 1   
        elif number == 5:
            if count3 == 0:
                last_type = ''
            new_type = secondary_prompts(last_type)
            last_type = new_type
            count3 += 1  
        if mode == '1':
            again = another()
        if mode == '2':
            good_prompt = use_performance_prompt()
            return good_prompt

def one_character(last_c, last_a):
    characters = ['A musician', 'A robot', 'An alien', 'An exterminator', 'A mime', 'An angel', 'A camp counselor', 'Someome special', 'A minstrel', 'A party animal', 'The doorman', 'A vampire slayer', 'A struggling writer', 'A fork', 'A zombie', 'A criminal', 'A salesman', 'A nerd', 'A hot single', 'A ghost', 'A zookeeper', 'A librarian', 'A chef', 'A hitman', 'A superhero', 'A vampire', 'A supermodel', 'A marriage counselor', 'A gladiator', 'A mad scientist', 'A circus performer', 'A person with memory loss', 'A blind person', 'A lawyer', 'A foreigner', 'A tourist', 'A stuffed animal', 'A magician', 'A neglectful parent', 'A baby', 'An average man', 'A monster', 'Santa Claus', 'An octopus', 'A butcher', 'The pope', 'The president', 'A soldier', 'A clown', 'A celebrity', 'A ninja', 'A pop singer', 'A shop owner', 'A dentist', 'A racecar driver', 'An athlete', 'A dancer', 'A bodybuilder', 'A midget', 'A millionaire', 'A person']
    actions = ['in an elevator', 'with an interesting past', 'searches for love', 'loses something important', 'reveals their secret', 'in the wrong place at the wrong time', 'fights for what is right', 'in their new home', 'starts a band', 'searches for truth', 'falls in love', 'sleeps too late', 'starts a business', 'hunts their prey', 'tries something new', 'argues with their partner', 'trying to have fun', 'with an interesting tactic', 'in a shopping mall', 'on a date', 'in a zoo', 'in a library', 'at a photoshoot', 'being filmed for a documentary', 'doing what he/she does best', 'fighting in a colosseum', 'gives advice to the children', 'finds a genie', 'goes undercover', 'paints a portrait', 'meets a new friend', 'in preschool', 'at career day', 'at the barber shop', 'at a job interview', 'in a traffic jam', 'in a sticky situation', 'discovers the meaning of life', 'in a nail salon', 'wins an award', 'on the first day at their new job', 'finds out terrible news', 'on a first date', 'at a party', 'in a fight', 'on a blind date', 'in the hospital', 'receives an unexpected package']
    while True:
        c_index = random.randint(0, len(characters)-1)
        a_index = random.randint(0, len(actions)-1)
        if c_index != last_c and a_index != last_a:
            print(characters[c_index] + ' ' + actions[a_index] + '.')
            last_c, last_a = c_index, a_index
            return last_c, last_a

def two_characters(last_c, last_a): 
    characters = ['Musicians', 'Robots','Monsters', 'Aliens', 'Food truck workers', 'Boy scouts', 'The last people on Earth', 'Janitors', 'A man and his dog', 'A doctor and their patient', 'A married couple', 'Teenage boys', 'Spies', 'Teenage girls', 'Endangered animals', 'Two gangsters', 'Two doctors', 'Circus performers', 'Members of a band', 'Two blind people', 'Adventurers', 'Two lawyers', 'Two zoo animals', 'Two foreigners', 'Two tourists', 'Two actors', 'Two stuffed animals', 'Two kitchen utensils', 'Zombies', 'Two criminals', 'Two nerds', 'Ghosts', 'Two chefs', 'Wizards', 'Birds', 'Horses', 'Two clowns', 'Arch enemies', 'Cats', 'Dogs', 'Nudists', 'A lovely couple', 'Two people', 'Two midgets', 'Best friends']
    actions = ['in an elevator', 'look through the trash', 'have the time of their lives', 'rob a store', 'help the needy', 'entertain at a party', 'have an argument',  'in space', 'in line at a club', 'in a burning building', 'at a fancy restaurant', 'find a time machine', 'break the law', 'win an award', 'discover something amazing', 'in their own personal hell', 'on a deserted island', 'lost at sea', 'on vacation', 'pitch a new product', 'take a last-minute job', "on Valentine's day", 'on Christmas morning', 'in a traffic jam', 'discover the meaning of life', 'at a party', 'boarding a bus', 'in the hospital']
    while True:
        c_index = random.randint(0, len(characters)-1)
        a_index = random.randint(0, len(actions)-1)
        if c_index != last_c and a_index != last_a:
            print(characters[c_index] + ' ' + actions[a_index] + '.')
            last_c, last_a = c_index, a_index
            return last_c, last_a

def secondary_prompts(last):
    while True:
        number = random.randint(1, 5)
        if number != last:
            if number == 1:
                origins = ['sliced bread', 'the fortune cookie', 'war', 'a new religion', 'music', 'fairy tales', 'the newest fashion trend', 'babies']
                print('The origin of ' + origins[random.randint(0, len(origins)-1)] + '.')
            if number == 2:
                plots = ['an exterminator', 'scientists', 'a lovely couple', 'a salesman', 'college', 'homeless men', 'zombies', 'babies', 'zoo animals', 'farm animals', 'kitchen utensils', 'office workers', 'a group of dysfunctional friends', 'doctors', 'criminals', 'lonely nerds', 'ghosts', 'actors', 'spies']
                beginnings = ['A movie about', 'A sitcom about']
                print(beginnings[random.randint(0, len(beginnings)-1)] + ' ' + plots[random.randint(0, len(plots)-1)] + '.')
            if number == 3:
                endings = ['a war', '"Titanic"', 'Jurassic Park', 'Romeo and Juliet']
                beginnings = ['Alternate endings for', 'An alternate ending for', 'A surprise ending for']
                print(beginnings[random.randint(0, len(beginnings)-1)] + ' ' + endings[random.randint(0, len(endings)-1)] + '.')
            if number == 4:
                scenes = ['Disney World', 'a restaurant', 'a hospital', "God's workshop", 'a new blockbuster film', 'the moon landing', 'a factory', 'a laboratory']
                print('Behind the scenes of' + ' ' + scenes[random.randint(0, len(scenes)-1)] + '.')
            if number == 5:
                phrases = ['"I love you"', '"I\'m dying"', '"will you marry me?"', 'a wrong number', 'an important question', '"I\'m serious"', '"He\'s dead"']
                beginnings = ['The wrong response to', 'A bad response to']
                print(beginnings[random.randint(0, len(beginnings)-1)] + ' ' + phrases[random.randint(0, len(phrases)-1)] + '.')
            last = number
            return last
    
def another(): 
    print()
    print('Another?')
    again = ' '
    answers = ['yes', 'no', 'y']
    while again not in answers:
        again = input().lower()
        if again == 'special':
          return again  
        elif again not in answers:
            print()
            print('Yes or no, please.')
    return again == 'yes' or again == 'y'

def get_time(): 
    while True:
        print()
        print_typer("How long would you like to spend preparing?")
        print()
        time = input()
        content = check_content(time)
        if not content:
            seconds, minutes = split_time(time)
            values = check_values(seconds, minutes)
            if values:
                minutes = int(minutes)*60
                prep = minutes + int(seconds)
                perform = 420 - prep
                return prep, perform               
                
def check_content(time): 
    symbol_check = check_symbols(time) 
    colon_check = check_colon(time) 
    return symbol_check or colon_check

def check_symbols(time): 
    symbols = '1 2 3 4 5 6 7 8 9 0 :'.split()
    for i in time:
        if i not in symbols:
            return True
    return False

def check_colon(time): #Time entry bug fixed! It was about a million times easier than I made it out to be the first time I tried to fix it.
    if time[0] == ':' or time[len(time)-1] == ':':
        return True
    colon_count = 0
    for i in range(len(time)):
        if time[i] == ':':
            colon_count += 1
    if colon_count != 1:
        return True
    return False

def split_time(time):
    for i in range(len(time)):
        if time[i] == ':':
            seconds = time[i+1:]
            minutes = time[:i]
    return seconds, minutes

def check_values(seconds, minutes): #check_minutes() and check_seconds() were combined and turned out to take up much less space
    minute_check = int(minutes) < 7 and len(minutes) <=1
    second_check = int(seconds) < 60 and len(seconds) == 2
    return minute_check or second_check

def show_performance_prompt(mode): 
    print()
    print("Your prompt is:")
    print_slowly("...")
    print()
    prompt = get_prompt(mode)
    return prompt

def use_performance_prompt(): 
    print('Would you like to use this prompt?')
    again = ' '
    answers = ['yes', 'no']
    while again not in answers:
        again = input().lower()
        if again == 'cancel':
            return again
        elif again not in answers:
            print()
            print('Yes, no, or cancel please.')
    return again == 'yes'

def countdowns(prep, perform):
    print('Prep starts now!')
    while prep > 0:
        time.sleep(1)
        prep -= 1
        if prep <= 3 and prep != 0:
            print(str(prep) + '...')
    print('Prep time is up! Begin your scene!')
    while perform > 0:
        time.sleep(1)
        perform = perform - 1
        if perform == 60:
            print('One minute remaining!')
        if perform == 30:
            print('Thirty seconds remaining!')
        if perform <= 3 and perform != 0:
            print(str(perform) + '...')
    print('TIME!')

def judges(): 
    time.sleep(2)
    print_typer("Let's see what your judge thought.")
    print()
    print_slowly('...')
    print()
    print()
    comment_amount = random.randint(1, 3)
    good = random.randint(1, 2)
    comments(comment_amount, good)
    score(good)

def comments(comment_amount, good):
    good_comments = ['Good job!', 'Great chemistry.', 'Excellent use of space.' "I haven't laughed so hard in weeks!", "Creative interpretation of the prompt.", "Nice character balance.", "INCREDIBLE dialogue!",  "Could have been a scripted scene!", "You did a great job of not talking over each other."]
    bad_comments = ["I didn't even follow what was happening.", "Make sure you don't mumble.", "I don't feel any chemistry between the two of you.", "You might want to consider finding different partners.", "If I were to eat your improv and vomit it back onto the performance space, it would still be better than what I just had to watch.", "Not very expressive.", "Facial expressions didn't match dialogue.", "Make sure you don't talk over each other."]
    if good == 1:
        index = list(range(len(good_comments)))
        responses = good_comments
    else:
        index = list(range(len(bad_comments)))
        responses = bad_comments
    random.shuffle(index)
    use_comments = []
    use = index[:comment_amount]
    for i in use:
        use_comments.append(responses[i])
    print(' '.join(use_comments))

def score(good): #The possibility of the score 2/100 is gone
    if good == 1:
        place = random.randint(1,2)
        if place == 1:
            score = random.randint(96, 100)
        else:
            score = random.randint(90, 95)
    else:
        score= random.randint(70, 89)
        place = random.randint(3, 5)
    print(str(place) + '/' + str(score))
    
def about(): 
    print("Hello! I am Bhavish, the improv .")
    print("I can create over 3000 randomly-generated improv prompts, and even time your performance!")
    print("I am the creative product of Michael Moore and Saverio Turrano, an Absegami High School NJDFL improv duo.")
    print("The idea for an improv-prompt-generating robot started simply as a passing thought, but with a bit of coding magic, and a sprinkle of imagination, I was created!")
    print("My name originates from an Eastern High School improv performer and judge, Bhavish Malkani. ")
    print("Paired with Dan Mosely, Bhavish was a role model for Michael and Saverio as they began their journey into the world of forensics and improv, inspiring them to get better and better.")
    print("I am able to generate randomized improv prompts by pairing a random character or set of characters with a random action or scenario in order to form a full prompt.")
    print("Give this a try in practice mode by generating and reading as many prompts as you'd like!")
    print("Once you think you're ready for the challenge, grab your improv partner and enter performance mode, where you will be provided with a prompt and timed for a full seven minutes.")
    print("I am still a work-in-progress.")
    print("I am currently being tested and built, as my code is modified and improved with the intention of making me fully available to any improv actor, pair, or group that wants to hone their skills.")
    
print_typer("Hello forensicator! I am Bhavish, the improv robot!")
time.sleep(1)
print()
while True:
    print()
    mode = mode_select()
    if mode == '1':
        practice_mode_intro()
        get_prompt(mode)
    if mode == '2':
        again = True
        while again:
            prep, perform = get_time()
            good_prompt = False
            while not good_prompt:
                status = show_performance_prompt(mode)
                if status == 'cancel':
                    break
                else:
                    good_prompt = status
            if status == 'cancel':
                break
            print()
            countdowns(prep, perform)
            judges()
            again = another()
    if mode == '3':
        about()
    if mode == '4':
        print()
        print_typer("Thank you!")
        time.sleep(2)
        break
